import React, { useState } from 'react';
import { View, Text, FlatList, TouchableOpacity, Alert } from 'react-native';
import { useTheme, Card, FAB, Switch, Chip, Searchbar } from 'react-native-paper';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { useTranslation } from 'react-i18next';
import * as Haptics from 'expo-haptics';

import CommonView from '@/src/components/common/CommonView';
import { RestaurantMenuStackScreenProps } from '@/src/navigation/types';

interface MenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  isAvailable: boolean;
  image?: string;
  preparationTime: number;
}

interface ErrorState {
  hasError: boolean;
  message: string;
}

const MenuItemsList: React.FC<RestaurantMenuStackScreenProps<'MenuItemsList'>> = () => {
  const { colors } = useTheme();
  const { t } = useTranslation();
  const navigation = useNavigation();
  
  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<ErrorState>({ hasError: false, message: '' });\n  const [refreshing, setRefreshing] = useState(false);\n\n  // Mock data - replace with actual API call\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([\n    {\n      id: '1',\n      name: 'Jollof Rice with Chicken',\n      description: 'Traditional Nigerian jollof rice served with grilled chicken',\n      price: 2500,\n      category: 'Main Course',\n      isAvailable: true,\n      preparationTime: 25,\n    },\n    {\n      id: '2',\n      name: 'Pepper Soup',\n      description: 'Spicy Nigerian pepper soup with assorted meat',\n      price: 1800,\n      category: 'Soup',\n      isAvailable: true,\n      preparationTime: 15,\n    },\n    {\n      id: '3',\n      name: 'Fried Rice',\n      description: 'Delicious fried rice with vegetables and chicken',\n      price: 2200,\n      category: 'Main Course',\n      isAvailable: false,\n      preparationTime: 20,\n    },\n    {\n      id: '4',\n      name: 'Suya',\n      description: 'Grilled spiced meat skewers',\n      price: 1500,\n      category: 'Appetizer',\n      isAvailable: true,\n      preparationTime: 10,\n    },\n    {\n      id: '5',\n      name: 'Chin Chin',\n      description: 'Crunchy fried pastry cubes',\n      price: 800,\n      category: 'Dessert',\n      isAvailable: true,\n      preparationTime: 5,\n    },\n  ]);\n\n  const categories = ['all', ...Array.from(new Set(menuItems.map(item => item.category)))];\n\n  const filteredItems = menuItems.filter(item => {\n    const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                          item.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || item.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleAddItem = () => {\n    try {\n      Haptics.selectionAsync();\n      navigation.navigate('RestaurantMenuItemForm', {});\n    } catch (error) {\n      setError({ hasError: true, message: 'Failed to navigate to add item screen' });\n    }\n  };\n\n  const handleEditItem = (itemId: string) => {\n    try {\n      Haptics.selectionAsync();\n      navigation.navigate('RestaurantMenuItemForm', { itemId });\n    } catch (error) {\n      setError({ hasError: true, message: 'Failed to navigate to edit item screen' });\n    }\n  };\n\n  const handleToggleAvailability = async (itemId: string) => {\n    try {\n      setIsLoading(true);\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      setMenuItems(prev => \n        prev.map(item => \n          item.id === itemId \n            ? { ...item, isAvailable: !item.isAvailable }\n            : item\n        )\n      );\n    } catch (error) {\n      setError({ hasError: true, message: 'Failed to update item availability' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteItem = (itemId: string, itemName: string) => {\n    Alert.alert(\n      t('delete_item'),\n      `${t('are_you_sure_delete')} \"${itemName}\"?`,\n      [\n        { text: t('cancel'), style: 'cancel' },\n        {\n          text: t('delete'),\n          style: 'destructive',\n          onPress: async () => {\n            try {\n              setIsLoading(true);\n              // Simulate API call\n              await new Promise(resolve => setTimeout(resolve, 500));\n              setMenuItems(prev => prev.filter(item => item.id !== itemId));\n              Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n            } catch (error) {\n              setError({ hasError: true, message: 'Failed to delete item' });\n            } finally {\n              setIsLoading(false);\n            }\n          },\n        },\n      ]\n    );\n  };\n\n  const handleManageCategories = () => {\n    try {\n      Haptics.selectionAsync();\n      navigation.navigate('RestaurantCategoriesManager');\n    } catch (error) {\n      setError({ hasError: true, message: 'Failed to navigate to categories screen' });\n    }\n  };\n\n  const onRefresh = async () => {\n    try {\n      setRefreshing(true);\n      setError({ hasError: false, message: '' });\n      // Simulate API refresh\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (error) {\n      setError({ hasError: true, message: 'Failed to refresh menu items' });\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  const renderMenuItem = ({ item }: { item: MenuItem }) => (\n    <Card style={{ marginBottom: 12, backgroundColor: colors.surface }}>\n      <View style={{ padding: 16 }}>\n        <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n          <View style={{ flex: 1, marginRight: 12 }}>\n            <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 4 }}>\n              <Text style={{ fontSize: 16, fontWeight: 'bold', color: colors.onSurface, flex: 1 }}>\n                {item.name}\n              </Text>\n              <Switch\n                value={item.isAvailable}\n                onValueChange={() => handleToggleAvailability(item.id)}\n                trackColor={{ false: '#767577', true: '#007aff' }}\n                thumbColor={item.isAvailable ? '#ffffff' : '#f4f3f4'}\n                disabled={isLoading}\n              />\n            </View>\n            \n            <Text style={{ fontSize: 12, color: colors.onSurfaceVariant, marginBottom: 8 }}>\n              {item.description}\n            </Text>\n            \n            <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 8 }}>\n              <Chip\n                style={{ backgroundColor: '#007aff20', marginRight: 8 }}\n                textStyle={{ color: '#007aff', fontSize: 10 }}\n                compact\n              >\n                {item.category}\n              </Chip>\n              <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <MaterialCommunityIcons name=\"clock-outline\" size={12} color={colors.onSurfaceVariant} />\n                <Text style={{ fontSize: 10, color: colors.onSurfaceVariant, marginLeft: 2 }}>\n                  {item.preparationTime} min\n                </Text>\n              </View>\n            </View>\n            \n            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n              <Text style={{ fontSize: 18, fontWeight: 'bold', color: '#007aff' }}>\n                {item.price.toLocaleString()} XAF\n              </Text>\n              \n              <View style={{ flexDirection: 'row' }}>\n                <TouchableOpacity\n                  onPress={() => handleEditItem(item.id)}\n                  style={{\n                    backgroundColor: '#007aff20',\n                    padding: 8,\n                    borderRadius: 8,\n                    marginRight: 8,\n                  }}\n                >\n                  <MaterialCommunityIcons name=\"pencil\" size={16} color=\"#007aff\" />\n                </TouchableOpacity>\n                \n                <TouchableOpacity\n                  onPress={() => handleDeleteItem(item.id, item.name)}\n                  style={{\n                    backgroundColor: '#FF444420',\n                    padding: 8,\n                    borderRadius: 8,\n                  }}\n                >\n                  <MaterialCommunityIcons name=\"delete\" size={16} color=\"#FF4444\" />\n                </TouchableOpacity>\n              </View>\n            </View>\n            \n            {!item.isAvailable && (\n              <View style={{ marginTop: 8 }}>\n                <Chip\n                  style={{ backgroundColor: '#FF444420', alignSelf: 'flex-start' }}\n                  textStyle={{ color: '#FF4444', fontSize: 10 }}\n                  compact\n                >\n                  {t('sold_out')}\n                </Chip>\n              </View>\n            )}\n          </View>\n        </View>\n      </View>\n    </Card>\n  );\n\n  if (error.hasError) {\n    return (\n      <CommonView>\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20 }}>\n          <MaterialCommunityIcons name=\"alert-circle\" size={48} color=\"#FF4444\" />\n          <Text style={{ fontSize: 18, fontWeight: 'bold', color: colors.onSurface, marginTop: 16, textAlign: 'center' }}>\n            {t('something_went_wrong')}\n          </Text>\n          <Text style={{ fontSize: 14, color: colors.onSurfaceVariant, marginTop: 8, textAlign: 'center' }}>\n            {error.message}\n          </Text>\n          <TouchableOpacity\n            onPress={() => {\n              setError({ hasError: false, message: '' });\n              onRefresh();\n            }}\n            style={{\n              backgroundColor: '#007aff',\n              paddingHorizontal: 24,\n              paddingVertical: 12,\n              borderRadius: 8,\n              marginTop: 16,\n            }}\n          >\n            <Text style={{ color: 'white', fontWeight: 'bold' }}>{t('try_again')}</Text>\n          </TouchableOpacity>\n        </View>\n      </CommonView>\n    );\n  }\n\n  return (\n    <CommonView>\n      <View style={{ flex: 1 }}>\n        {/* Header */}\n        <View style={{ padding: 16, paddingBottom: 0 }}>\n          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n            <View>\n              <Text style={{ fontSize: 28, fontWeight: 'bold', color: colors.onBackground }}>\n                {t('menu_items')}\n              </Text>\n              <Text style={{ fontSize: 14, color: colors.onSurfaceVariant, marginTop: 4 }}>\n                {filteredItems.length} {t('items')} • {filteredItems.filter(item => item.isAvailable).length} {t('available')}\n              </Text>\n            </View>\n            <TouchableOpacity\n              onPress={handleManageCategories}\n              style={{\n                backgroundColor: '#007aff20',\n                padding: 12,\n                borderRadius: 8,\n              }}\n            >\n              <MaterialCommunityIcons name=\"tag-multiple\" size={20} color=\"#007aff\" />\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Search */}\n        <View style={{ padding: 16, paddingTop: 12 }}>\n          <Searchbar\n            placeholder={t('search_menu_items')}\n            onChangeText={setSearchQuery}\n            value={searchQuery}\n            style={{ backgroundColor: colors.surface }}\n          />\n        </View>\n\n        {/* Category Filter */}\n        <View style={{ paddingHorizontal: 16, paddingBottom: 8 }}>\n          <FlatList\n            horizontal\n            showsHorizontalScrollIndicator={false}\n            data={categories}\n            keyExtractor={item => item}\n            renderItem={({ item }) => (\n              <TouchableOpacity\n                onPress={() => {\n                  Haptics.selectionAsync();\n                  setSelectedCategory(item);\n                }}\n                style={{\n                  paddingHorizontal: 16,\n                  paddingVertical: 8,\n                  backgroundColor: selectedCategory === item ? '#007aff' : colors.surfaceVariant,\n                  borderRadius: 20,\n                  marginRight: 8,\n                }}\n              >\n                <Text\n                  style={{\n                    fontWeight: '600',\n                    color: selectedCategory === item ? 'white' : colors.onSurfaceVariant,\n                  }}\n                >\n                  {item === 'all' ? t('all') : item}\n                </Text>\n              </TouchableOpacity>\n            )}\n          />\n        </View>\n\n        {/* Menu Items List */}\n        <FlatList\n          data={filteredItems}\n          renderItem={renderMenuItem}\n          keyExtractor={item => item.id}\n          contentContainerStyle={{ padding: 16, paddingTop: 8 }}\n          refreshing={refreshing}\n          onRefresh={onRefresh}\n          showsVerticalScrollIndicator={false}\n          ListEmptyComponent={\n            <View style={{ alignItems: 'center', justifyContent: 'center', paddingVertical: 40 }}>\n              <MaterialCommunityIcons\n                name=\"food-off\"\n                size={48}\n                color={colors.onSurfaceVariant}\n              />\n              <Text style={{ color: colors.onSurfaceVariant, marginTop: 8, fontSize: 16 }}>\n                {searchQuery ? t('no_items_match') : t('no_menu_items_yet')}\n              </Text>\n              {!searchQuery && (\n                <Text style={{ color: colors.onSurfaceVariant, marginTop: 4, fontSize: 14, textAlign: 'center' }}>\n                  {t('start_building_menu')}\n                </Text>\n              )}\n            </View>\n          }\n        />\n\n        {/* FAB */}\n        <FAB\n          icon=\"plus\"\n          style={{\n            position: 'absolute',\n            margin: 16,\n            right: 0,\n            bottom: 0,\n            backgroundColor: '#007aff',\n          }}\n          onPress={handleAddItem}\n        />\n      </View>\n    </CommonView>\n  );\n};\n\nexport default MenuItemsList;