import { useEffect, useCallback } from 'react';\nimport { useNotifications } from '@/src/hooks/shared/useNotifications';\nimport { restaurantNotificationService } from '@/src/services/restaurant/restaurantNotificationService';\nimport { useCurrentRestaurant, useUser, useIsAuthenticated } from '@/src/stores/AuthStore';\nimport { useRestaurantProfile } from '@/src/hooks/restaurant/useRestaurantProfile';\n\n/**\n * Restaurant-specific notification hook that combines:\n * 1. Server notifications (orders, system messages, etc.)\n * 2. Local notifications (business reminders, inventory alerts, etc.)\n */\nexport const useRestaurantNotifications = () => {\n  const user = useUser();\n  const currentRestaurant = useCurrentRestaurant();\n  const { restaurantProfile } = useRestaurantProfile();\n  \n  // Use the shared notification hook for server notifications\n  const sharedNotifications = useNotifications();\n\n  // Initialize restaurant notification service\n  useEffect(() => {\n    const initializeService = async () => {\n      if (user && currentRestaurant) {\n        try {\n          await restaurantNotificationService.initialize();\n          console.log('🏪 Restaurant notification service ready');\n        } catch (error) {\n          console.error('Failed to initialize restaurant notifications:', error);\n        }\n      }\n    };\n\n    initializeService();\n  }, [user, currentRestaurant]);\n\n  // === LOCAL NOTIFICATION METHODS ===\n\n  const sendNewOrderNotification = useCallback(async (\n    orderId: string,\n    customerName: string,\n    orderTotal: number\n  ) => {\n    try {\n      return await restaurantNotificationService.notifyNewOrder(\n        orderId,\n        customerName,\n        orderTotal\n      );\n    } catch (error) {\n      console.error('Failed to send new order notification:', error);\n    }\n  }, []);\n\n  const sendOrderTimeoutNotification = useCallback(async (\n    orderId: string,\n    customerName: string\n  ) => {\n    try {\n      return await restaurantNotificationService.notifyOrderTimeout(\n        orderId,\n        customerName\n      );\n    } catch (error) {\n      console.error('Failed to send order timeout notification:', error);\n    }\n  }, []);\n\n  const sendDailySummaryNotification = useCallback(async (\n    totalOrders: number,\n    totalRevenue: number,\n    date: string = new Date().toLocaleDateString()\n  ) => {\n    try {\n      return await restaurantNotificationService.notifyDailySummary(\n        totalOrders,\n        totalRevenue,\n        date\n      );\n    } catch (error) {\n      console.error('Failed to send daily summary notification:', error);\n    }\n  }, []);\n\n  const sendPeakHoursNotification = useCallback(async (expectedOrders: number) => {\n    try {\n      return await restaurantNotificationService.notifyPeakHours(expectedOrders);\n    } catch (error) {\n      console.error('Failed to send peak hours notification:', error);\n    }\n  }, []);\n\n  const sendSlowPeriodNotification = useCallback(async () => {\n    try {\n      return await restaurantNotificationService.notifySlowPeriod();\n    } catch (error) {\n      console.error('Failed to send slow period notification:', error);\n    }\n  }, []);\n\n  const sendLowStockNotification = useCallback(async (\n    itemName: string,\n    currentStock: number\n  ) => {\n    try {\n      return await restaurantNotificationService.notifyLowStock(\n        itemName,\n        currentStock\n      );\n    } catch (error) {\n      console.error('Failed to send low stock notification:', error);\n    }\n  }, []);\n\n  const sendOutOfStockNotification = useCallback(async (itemName: string) => {\n    try {\n      return await restaurantNotificationService.notifyOutOfStock(itemName);\n    } catch (error) {\n      console.error('Failed to send out of stock notification:', error);\n    }\n  }, []);\n\n  const sendPromotionPerformanceNotification = useCallback(async (\n    promotionName: string,\n    ordersGenerated: number\n  ) => {\n    try {\n      return await restaurantNotificationService.notifyPromotionPerformance(\n        promotionName,\n        ordersGenerated\n      );\n    } catch (error) {\n      console.error('Failed to send promotion performance notification:', error);\n    }\n  }, []);\n\n  // === REMINDER SCHEDULING ===\n\n  const scheduleMenuUpdateReminder = useCallback(async (hours: number = 24) => {\n    try {\n      return await restaurantNotificationService.scheduleMenuUpdateReminder(hours);\n    } catch (error) {\n      console.error('Failed to schedule menu update reminder:', error);\n    }\n  }, []);\n\n  const scheduleBusinessHoursReminder = useCallback(async (minutesBeforeClose: number = 30) => {\n    try {\n      return await restaurantNotificationService.scheduleBusinessHoursReminder(\n        minutesBeforeClose\n      );\n    } catch (error) {\n      console.error('Failed to schedule business hours reminder:', error);\n    }\n  }, []);\n\n  const scheduleOrderCheckReminder = useCallback(async (minutes: number = 15) => {\n    try {\n      return await restaurantNotificationService.scheduleOrderCheckReminder(minutes);\n    } catch (error) {\n      console.error('Failed to schedule order check reminder:', error);\n    }\n  }, []);\n\n  // === UTILITY METHODS ===\n\n  const cancelNotification = useCallback(async (notificationId: string) => {\n    try {\n      await restaurantNotificationService.cancelNotification(notificationId);\n    } catch (error) {\n      console.error('Failed to cancel notification:', error);\n    }\n  }, []);\n\n  const cancelAllLocalNotifications = useCallback(async () => {\n    try {\n      await restaurantNotificationService.cancelAllNotifications();\n    } catch (error) {\n      console.error('Failed to cancel all local notifications:', error);\n    }\n  }, []);\n\n  const getScheduledNotifications = useCallback(async () => {\n    try {\n      return await restaurantNotificationService.getScheduledNotifications();\n    } catch (error) {\n      console.error('Failed to get scheduled notifications:', error);\n      return [];\n    }\n  }, []);\n\n  const updateBadgeCount = useCallback(async (count?: number) => {\n    try {\n      if (count !== undefined) {\n        await restaurantNotificationService.setBadgeCount(count);\n      } else {\n        // Use unread count from server notifications\n        await restaurantNotificationService.setBadgeCount(sharedNotifications.unreadCount);\n      }\n    } catch (error) {\n      console.error('Failed to update badge count:', error);\n    }\n  }, [sharedNotifications.unreadCount]);\n\n  const clearBadge = useCallback(async () => {\n    try {\n      await restaurantNotificationService.clearBadge();\n    } catch (error) {\n      console.error('Failed to clear badge:', error);\n    }\n  }, []);\n\n  // Auto-update badge count when unread count changes\n  useEffect(() => {\n    updateBadgeCount();\n  }, [updateBadgeCount]);\n\n  // === BUSINESS LOGIC HELPERS ===\n\n  const shouldSendPeakHoursNotification = useCallback((currentHour: number) => {\n    // Typical restaurant peak hours: 11-13 (lunch) and 18-20 (dinner)\n    return (currentHour >= 11 && currentHour <= 13) || (currentHour >= 18 && currentHour <= 20);\n  }, []);\n\n  const shouldSendSlowPeriodNotification = useCallback((ordersInLastHour: number) => {\n    // Send if less than 2 orders in the last hour during business hours\n    const currentHour = new Date().getHours();\n    const isBusinessHours = currentHour >= 9 && currentHour <= 21;\n    return isBusinessHours && ordersInLastHour < 2;\n  }, []);\n\n  const getRecommendedReminderTimes = useCallback(() => {\n    const now = new Date();\n    const currentHour = now.getHours();\n    \n    return {\n      menuUpdate: currentHour < 9 ? 1 : 24, // 1 hour if before 9 AM, otherwise next day\n      businessHours: 30, // 30 minutes before closing\n      orderCheck: 15, // 15 minutes for order check\n    };\n  }, []);\n\n  return {\n    // Server notifications (from shared hook)\n    ...sharedNotifications,\n    \n    // Local notification methods\n    sendNewOrderNotification,\n    sendOrderTimeoutNotification,\n    sendDailySummaryNotification,\n    sendPeakHoursNotification,\n    sendSlowPeriodNotification,\n    sendLowStockNotification,\n    sendOutOfStockNotification,\n    sendPromotionPerformanceNotification,\n    \n    // Reminder scheduling\n    scheduleMenuUpdateReminder,\n    scheduleBusinessHoursReminder,\n    scheduleOrderCheckReminder,\n    \n    // Utility methods\n    cancelNotification,\n    cancelAllLocalNotifications,\n    getScheduledNotifications,\n    updateBadgeCount,\n    clearBadge,\n    \n    // Business logic helpers\n    shouldSendPeakHoursNotification,\n    shouldSendSlowPeriodNotification,\n    getRecommendedReminderTimes,\n    \n    // Restaurant context\n    restaurantProfile,\n    currentRestaurant,\n  };\n};\n\n/**\n * Hook for restaurant notification settings and preferences\n */\nexport const useRestaurantNotificationSettings = () => {\n  const { restaurantProfile } = useRestaurantProfile();\n  \n  // This could be expanded to include restaurant-specific notification preferences\n  // stored in the restaurant profile or a separate settings store\n  \n  return {\n    // Default settings - could be made configurable\n    enableOrderNotifications: true,\n    enableBusinessNotifications: true,\n    enableInventoryNotifications: true,\n    enablePromotionNotifications: true,\n    enableReminderNotifications: true,\n    \n    // Timing preferences\n    orderTimeoutMinutes: 15,\n    businessHoursReminderMinutes: 30,\n    menuUpdateReminderHours: 24,\n    \n    // Thresholds\n    lowStockThreshold: 5,\n    slowPeriodThreshold: 2, // orders per hour\n    peakHoursThreshold: 10, // expected orders\n    \n    restaurantProfile,\n  };\n};\n\nexport default useRestaurantNotifications;\n"